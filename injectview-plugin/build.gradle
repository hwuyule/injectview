apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'nexus'

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7'
    //for tests
    classpath 'com.darylteo.gradle:javassist-plugin:0.3.0'
  }
}

repositories {
  mavenCentral()

  //only needed to develop the lib
  mavenLocal()

  // Work around https://code.google.com/p/android/issues/detail?id=69270.
  def androidHome = System.getenv("ANDROID_HOME")
  maven {
    url "$androidHome/extras/android/m2repository/"
  }
}

dependencies {

  //compile 'com.android.tools.build:gradle:0.12.2'
  compile 'com.github.stephanenicolas.javassist:javassist-build-plugin-api:1.0.0'
  //needed to create a processor based on afterburner
  compile 'com.github.stephanenicolas.afterburner:afterburner-library:1.0.1'

  //only needed to create a plugin
  compile 'com.github.stephanenicolas.morpheus:morpheus-plugin:1.0.0'
  compile gradleApi()
  compile localGroovy()

  compile 'com.github.stephanenicolas.injectview:injectview-annotations:1.0.0-SNAPSHOT'


  compile 'org.projectlombok:lombok:1.14.2'
  compile 'com.google.android:android:4.4.2_r2'
  compile 'com.android.support:support-v4:19.1.0'

  //--TESTS
  testCompile "org.bouncycastle:bcprov-jdk15:$BOUNCYCASTLE_VERSION"

  testCompile("org.robolectric:robolectric:$ROBOLECTRIC_VERSION") {
    exclude module: 'classworlds'
    exclude module: 'maven-artifact'
    exclude module: 'maven-artifact-manager'
    exclude module: 'maven-error-diagnostics'
    exclude module: 'maven-model'
    exclude module: 'maven-plugin-registry'
    exclude module: 'maven-profile'
    exclude module: 'maven-project'
    exclude module: 'maven-settings'
    exclude module: 'nekohtml'
    exclude module: 'plexus-container-default'
    exclude module: 'plexus-interpolation'
    exclude module: 'plexus-utils'
    exclude module: 'wagon-file'
    exclude module: 'wagon-http-lightweight'
    exclude module: 'wagon-http-shared'
    exclude module: 'wagon-provider-api'
    exclude module: 'commons-logging'
    exclude module: 'httpclient'
    exclude group: 'com.google.android'
  }
  testCompile("org.apache.httpcomponents:httpclient:$HTTP_CLIENT_VERSION")
  testCompile("commons-logging:commons-logging:$COMMONS_LOGGING_VERSION")
  testCompile("com.google.android:android-test:$ANDROID_TEST_VERSION")
  testCompile "org.easymock:easymock:$EASY_MOCK_VERSION"
}

modifyPom {
  project {
    name "InjectView Gradle Plugin"
    description POM_DESCRIPTION
    url POM_URL

    scm {
      url POM_SCM_URL
      connection POM_SCM_CONNECTION
      developerConnection POM_SCM_DEV_CONNECTION
    }

    licenses {
      license {
        name POM_LICENCE_NAME
        url POM_LICENCE_URL
        distribution POM_LICENCE_DIST
      }
    }

    developers {
      developer {
        id POM_DEVELOPER_ID
        name POM_DEVELOPER_NAME
      }
    }
  }
}

//as we want to have non test classes in test source tree
//http://stackoverflow.com/a/14947906/693752
tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class" // whatever Ant pattern matches your test class files
}

//import com.github.stephanenicolas.injectview.InjectViewProcessor;
//
////run class transformer on test classes
//gradle.projectsEvaluated {
//  //testDebug should trigger transformation of source classes (not tests)
//  tasks.withType(JavaCompile) { task ->
//    if( task.name.contains('Test')) {
//      def matcher = "Test"
//      String variantName = matcher[0][1]
//      String transformerClassName = InjectViewProcessor.class.getSimpleName()
//      //TODO remove
//      String transformationDir = "${project.buildDir}/intermediates/transformations/transform${transformerClassName}${variantName}"
//
//      def transformTask = "transform${transformerClassName}${variantName}"
//      project.task(transformTask, type: TransformationTask) {
//        description = "Transform a file using ${transformerClassName}"
//        destinationDir = project.file(transformationDir)
//        from ("${javaCompile.destinationDir.path}")
//        transformation = new InjectViewProcessor();
//        outputs.upToDateWhen {
//          false
//        }
//        eachFile {
//          log.debug(LOG_TAG, "Transformed:" + it.path)
//        }
//      }
//
//      def copyTransformedTask = "copyTransformed${transformerClassName}${variantName}"
//      project.task(copyTransformedTask, type: Copy) {
//        description = "Copy transformed file to build dir for ${transformerClassName}"
//        from (transformationDir)
//        into ("${javaCompile.destinationDir.path}")
//        outputs.upToDateWhen {
//          false
//        }
//        eachFile {
//          log.debug(LOG_TAG, "Copied into build:" + it.path)
//        }
//      }
//
//      try {
//        task.dependsOn(project.tasks.getByName(transformTask))
//        task.dependsOn(project.tasks.getByName(copyTransformedTask))
//      } catch (Exception e) {
//      }
//    }
//
//  }
//}
//
